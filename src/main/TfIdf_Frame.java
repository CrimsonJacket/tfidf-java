/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import calculation.StopWord;
import document.DocumentParser;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Daniel
 */
public class TfIdf_Frame extends javax.swing.JFrame {

    private DocumentParser dp = null;
    private StopWord sw = null;

    /**
     * Creates new form TfIdf_Frame
     */
    public TfIdf_Frame() {
        initComponents();
        centerAlign();
    }

    private void centerAlign() {
        Dimension frame = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) (frame.width - this.getWidth()) / 2;
        int y = (int) (frame.height - this.getHeight()) / 2;
        setLocation(x, y);
    }

    public static void setSettingsMessage(String msg) {
        settingTextArea.setText(msg + "\n");
        settingTextArea.update(settingTextArea.getGraphics());
    }

    public static void appendSettingsMessage(String msg) {
        settingTextArea.append(msg + "\n");
        settingTextArea.update(settingTextArea.getGraphics());
    }

    public static void setMessage(String msg) {
        mainTextArea.setText(msg + "\n");
        mainTextArea.update(mainTextArea.getGraphics());
    }

    public static void appendMessage(String msg) {
        mainTextArea.append(msg + "\n");
        mainTextArea.update(mainTextArea.getGraphics());
    }

    public void resetSettings() {
        if (dp != null && sw != null) {
            folderPathText.setText(DocumentParser.filePath);
            stopWordPathText.setText(StopWord.fileName);
            cosineCheckBox.setSelected(DocumentParser.enableCosine);
            stopWordCheckBox.setSelected(DocumentParser.enableStopWord);
            wordStemCheckBox.setSelected(DocumentParser.enableWordStem);
            searchTermCheckBox.setSelected(DocumentParser.enableWordExpansion);
            synCheckBox.setSelected(DocumentParser.enableSynonym);
            hypCheckBox.setSelected(DocumentParser.enableHyponym);
        } else {
            folderPathText.setText("");
            stopWordPathText.setText("");
            cosineCheckBox.setSelected(false);
            stopWordCheckBox.setSelected(false);
            wordStemCheckBox.setSelected(false);
            searchTermCheckBox.setSelected(false);
            synCheckBox.setSelected(false);
            hypCheckBox.setSelected(false);
            dp = null;
            sw = null;
            searchTextField.setEnabled(false);
            calculateBtn.setEnabled(false);
        }      
    }

    public void resetTopList() {
        try {
            if (DocumentParser.tfidfMap != null) {
                DefaultListModel model = (DefaultListModel) topList.getModel();
                model.removeAllElements();
            }
            topList.update(topList.getGraphics());
        } catch (Exception e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dirChooser = new javax.swing.JFileChooser();
        fileChooser = new javax.swing.JFileChooser();
        settingsDialog = new javax.swing.JDialog();
        settingsPanel = new javax.swing.JPanel();
        settingsLabel = new javax.swing.JLabel();
        cosineCheckBox = new javax.swing.JCheckBox();
        wordStemCheckBox = new javax.swing.JCheckBox();
        stopWordCheckBox = new javax.swing.JCheckBox();
        hypCheckBox = new javax.swing.JCheckBox();
        okSettingButton = new javax.swing.JButton();
        cancelSettingButton = new javax.swing.JButton();
        additionalFeaturesLabel = new javax.swing.JLabel();
        chooseFolderLabel = new javax.swing.JLabel();
        chooseStopWordLabel = new javax.swing.JLabel();
        folderPathText = new javax.swing.JTextField();
        stopWordPathText = new javax.swing.JTextField();
        chooserFolderButton = new javax.swing.JButton();
        chooseStopWordButton = new javax.swing.JButton();
        synCheckBox = new javax.swing.JCheckBox();
        searchTermCheckBox = new javax.swing.JCheckBox();
        fileInfoDialog = new javax.swing.JDialog();
        fileInfoPanel = new javax.swing.JPanel();
        fileTitleLabel = new javax.swing.JLabel();
        filenameLabel = new javax.swing.JLabel();
        fileLocationLabel = new javax.swing.JLabel();
        tfidfScrollPane = new javax.swing.JScrollPane();
        tfidfTextArea = new javax.swing.JTextArea();
        tfidfLabel = new javax.swing.JLabel();
        cosineSimScrollPane1 = new javax.swing.JScrollPane();
        cosineTextArea = new javax.swing.JTextArea();
        cosineSimLabel = new javax.swing.JLabel();
        filenameTextField = new javax.swing.JTextField();
        locationTextField = new javax.swing.JTextField();
        viewFileButton = new javax.swing.JButton();
        fileViewerDialog = new javax.swing.JDialog();
        fileViewerPanel = new javax.swing.JPanel();
        fileViewScrollPane = new javax.swing.JScrollPane();
        fileViewerTextArea = new javax.swing.JTextArea();
        helpDialog = new javax.swing.JDialog();
        helpPanel = new javax.swing.JPanel();
        helpScrollPane = new javax.swing.JScrollPane();
        helpTextArea = new javax.swing.JTextArea();
        helpLabel = new javax.swing.JLabel();
        fullPanel = new javax.swing.JPanel();
        searchTextField = new javax.swing.JTextField();
        calculateBtn = new javax.swing.JButton();
        textAreaScrollPane = new javax.swing.JScrollPane();
        mainTextArea = new javax.swing.JTextArea();
        top10Label = new javax.swing.JLabel();
        topListScrollPane = new javax.swing.JScrollPane();
        topList = new javax.swing.JList();
        top10Label1 = new javax.swing.JLabel();
        settingScrollPane = new javax.swing.JScrollPane();
        settingTextArea = new javax.swing.JTextArea();
        MenuBar = new javax.swing.JMenuBar();
        settingMenu = new javax.swing.JMenu();
        chooseOptions = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();

        dirChooser.setDialogTitle("");
        dirChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        dirChooser.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        fileChooser.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        settingsDialog.setTitle("Settings - Options");
        settingsDialog.setBackground(java.awt.Color.white);
        settingsDialog.setResizable(false);

        settingsPanel.setBackground(java.awt.Color.white);
        settingsPanel.setForeground(java.awt.Color.white);

        settingsLabel.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        settingsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        settingsLabel.setText("Settings - Options");

        cosineCheckBox.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        cosineCheckBox.setText("Cosine Similarity");

        wordStemCheckBox.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        wordStemCheckBox.setText("Word Stemming");

        stopWordCheckBox.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        stopWordCheckBox.setText("Stop Words");

        hypCheckBox.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        hypCheckBox.setText("Hyponyms");

        okSettingButton.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        okSettingButton.setText("OK");
        okSettingButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okSettingButtonMouseClicked(evt);
            }
        });

        cancelSettingButton.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        cancelSettingButton.setText("Cancel");
        cancelSettingButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelSettingButtonMouseClicked(evt);
            }
        });

        additionalFeaturesLabel.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        additionalFeaturesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        additionalFeaturesLabel.setText("Additional Features");

        chooseFolderLabel.setText("Choose Folder: ");

        chooseStopWordLabel.setText("StopWord File: ");

        chooserFolderButton.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        chooserFolderButton.setText("...");
        chooserFolderButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chooserFolderButtonMouseClicked(evt);
            }
        });

        chooseStopWordButton.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        chooseStopWordButton.setText("...");
        chooseStopWordButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chooseStopWordButtonMouseClicked(evt);
            }
        });

        synCheckBox.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        synCheckBox.setText("Synonyms");

        searchTermCheckBox.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        searchTermCheckBox.setText("Search Term Expansion");

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                .addContainerGap(156, Short.MAX_VALUE)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(chooseStopWordLabel)
                                    .addComponent(chooseFolderLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(settingsPanelLayout.createSequentialGroup()
                                        .addComponent(folderPathText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(chooserFolderButton))
                                    .addGroup(settingsPanelLayout.createSequentialGroup()
                                        .addComponent(stopWordPathText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(chooseStopWordButton))))
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(stopWordCheckBox)
                                    .addComponent(cosineCheckBox)
                                    .addComponent(synCheckBox))
                                .addGap(37, 37, 37)
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(hypCheckBox)
                                    .addComponent(wordStemCheckBox)
                                    .addComponent(searchTermCheckBox))))
                        .addGap(84, 84, 84))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                        .addComponent(okSettingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(cancelSettingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(205, 205, 205))))
            .addComponent(additionalFeaturesLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(settingsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(settingsLabel)
                .addGap(47, 47, 47)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseFolderLabel)
                    .addComponent(folderPathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooserFolderButton))
                .addGap(18, 18, 18)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseStopWordLabel)
                    .addComponent(stopWordPathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseStopWordButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(additionalFeaturesLabel)
                .addGap(43, 43, 43)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cosineCheckBox)
                    .addComponent(wordStemCheckBox))
                .addGap(18, 18, 18)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopWordCheckBox)
                    .addComponent(searchTermCheckBox))
                .addGap(18, 18, 18)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(synCheckBox)
                    .addComponent(hypCheckBox))
                .addGap(38, 38, 38)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okSettingButton)
                    .addComponent(cancelSettingButton))
                .addGap(52, 52, 52))
        );

        javax.swing.GroupLayout settingsDialogLayout = new javax.swing.GroupLayout(settingsDialog.getContentPane());
        settingsDialog.getContentPane().setLayout(settingsDialogLayout);
        settingsDialogLayout.setHorizontalGroup(
            settingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        settingsDialogLayout.setVerticalGroup(
            settingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsDialogLayout.createSequentialGroup()
                .addComponent(settingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        fileInfoDialog.setTitle("File Information");

        fileInfoPanel.setBackground(new java.awt.Color(254, 254, 254));

        fileTitleLabel.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        fileTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fileTitleLabel.setText("File Information");

        filenameLabel.setText("Filename:");

        fileLocationLabel.setText("Location:");

        tfidfTextArea.setEditable(false);
        tfidfTextArea.setColumns(20);
        tfidfTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        tfidfTextArea.setRows(5);
        tfidfScrollPane.setViewportView(tfidfTextArea);

        tfidfLabel.setText("TF-IDF Vectors");

        cosineTextArea.setEditable(false);
        cosineTextArea.setColumns(20);
        cosineTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        cosineTextArea.setRows(5);
        cosineSimScrollPane1.setViewportView(cosineTextArea);

        cosineSimLabel.setText("Cosine Similarity Values");

        filenameTextField.setEditable(false);
        filenameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filenameTextFieldActionPerformed(evt);
            }
        });

        locationTextField.setEditable(false);

        viewFileButton.setText(" View ");
        viewFileButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewFileButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout fileInfoPanelLayout = new javax.swing.GroupLayout(fileInfoPanel);
        fileInfoPanel.setLayout(fileInfoPanelLayout);
        fileInfoPanelLayout.setHorizontalGroup(
            fileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileInfoPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(fileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(fileInfoPanelLayout.createSequentialGroup()
                        .addComponent(tfidfScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(cosineSimScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fileInfoPanelLayout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(tfidfLabel)
                .addGap(262, 262, 262)
                .addComponent(cosineSimLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fileInfoPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(fileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileLocationLabel)
                    .addComponent(filenameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(filenameTextField)
                    .addComponent(locationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(viewFileButton)
                .addGap(57, 57, 57))
        );
        fileInfoPanelLayout.setVerticalGroup(
            fileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileInfoPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(fileTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filenameLabel)
                    .addComponent(filenameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(fileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileLocationLabel)
                    .addComponent(locationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewFileButton))
                .addGap(10, 10, 10)
                .addGroup(fileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cosineSimLabel)
                    .addComponent(tfidfLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfidfScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(cosineSimScrollPane1))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout fileInfoDialogLayout = new javax.swing.GroupLayout(fileInfoDialog.getContentPane());
        fileInfoDialog.getContentPane().setLayout(fileInfoDialogLayout);
        fileInfoDialogLayout.setHorizontalGroup(
            fileInfoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileInfoDialogLayout.createSequentialGroup()
                .addComponent(fileInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        fileInfoDialogLayout.setVerticalGroup(
            fileInfoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        fileViewerDialog.setTitle("File Document Viewer - ");

        fileViewerPanel.setBackground(java.awt.Color.white);

        fileViewerTextArea.setEditable(false);
        fileViewerTextArea.setBackground(new java.awt.Color(254, 254, 254));
        fileViewerTextArea.setColumns(20);
        fileViewerTextArea.setLineWrap(true);
        fileViewerTextArea.setRows(5);
        fileViewScrollPane.setViewportView(fileViewerTextArea);

        javax.swing.GroupLayout fileViewerPanelLayout = new javax.swing.GroupLayout(fileViewerPanel);
        fileViewerPanel.setLayout(fileViewerPanelLayout);
        fileViewerPanelLayout.setHorizontalGroup(
            fileViewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileViewerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileViewScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                .addContainerGap())
        );
        fileViewerPanelLayout.setVerticalGroup(
            fileViewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileViewerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileViewScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 546, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout fileViewerDialogLayout = new javax.swing.GroupLayout(fileViewerDialog.getContentPane());
        fileViewerDialog.getContentPane().setLayout(fileViewerDialogLayout);
        fileViewerDialogLayout.setHorizontalGroup(
            fileViewerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileViewerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        fileViewerDialogLayout.setVerticalGroup(
            fileViewerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileViewerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        helpDialog.setTitle("Help - Contents");

        helpPanel.setBackground(new java.awt.Color(254, 254, 254));

        helpTextArea.setColumns(20);
        helpTextArea.setRows(5);
        helpTextArea.setText("      Enter the Settings Menu, to select Document \n      Directory and all other features.\n\n      Note:\n      Word Stemming will not only stem all words in \nthe Document, but also stem the term(s) you search\n      \n      Cosine Similarity Feature will utilize each term's TF-IDF \nValues as the Vectors required to calculate the Dot \nProduct and the Norms(required to calculate the Cosine\nSimilarity of 2 Documents)\n\n      Synonyms: are words with the same or similar \n                                meanings.\n\n      Hyponyms: are words or a phrase whose semantic \n                                 field is included within that of another \n                                 word.\n                                 For example, \"pigeon\", \"crow\", \"eagle\" \n                                 and \"seagull\" are all hyponyms of \"bird\".");
        helpScrollPane.setViewportView(helpTextArea);

        helpLabel.setText("Help ");

        javax.swing.GroupLayout helpPanelLayout = new javax.swing.GroupLayout(helpPanel);
        helpPanel.setLayout(helpPanelLayout);
        helpPanelLayout.setHorizontalGroup(
            helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(helpScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                    .addGroup(helpPanelLayout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(helpLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        helpPanelLayout.setVerticalGroup(
            helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(helpLabel)
                .addGap(18, 18, 18)
                .addComponent(helpScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout helpDialogLayout = new javax.swing.GroupLayout(helpDialog.getContentPane());
        helpDialog.getContentPane().setLayout(helpDialogLayout);
        helpDialogLayout.setHorizontalGroup(
            helpDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(helpPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        helpDialogLayout.setVerticalGroup(
            helpDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(helpPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TF-IDF Java Program");
        setBackground(new java.awt.Color(254, 254, 254));
        setResizable(false);

        fullPanel.setBackground(new java.awt.Color(254, 254, 254));

        searchTextField.setFont(new java.awt.Font("Monospaced", 0, 15)); // NOI18N
        searchTextField.setText("[ Enter Search ]");
        searchTextField.setEnabled(false);
        searchTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusLost(evt);
            }
        });

        calculateBtn.setBackground(new java.awt.Color(255, 255, 255));
        calculateBtn.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        calculateBtn.setText("Calculate");
        calculateBtn.setEnabled(false);
        calculateBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                calculateBtnMouseClicked(evt);
            }
        });

        mainTextArea.setEditable(false);
        mainTextArea.setBackground(new java.awt.Color(254, 254, 254));
        mainTextArea.setColumns(20);
        mainTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        mainTextArea.setLineWrap(true);
        mainTextArea.setRows(5);
        mainTextArea.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        mainTextArea.setHighlighter(null);
        textAreaScrollPane.setViewportView(mainTextArea);

        top10Label.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        top10Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        top10Label.setText("Top 10 List");

        topList.setBackground(new java.awt.Color(254, 254, 254));
        topList.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        topList.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        topList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        topList.setAutoscrolls(false);
        topList.setEnabled(false);
        topList.setFocusable(false);
        topList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                topListMouseClicked(evt);
            }
        });
        topListScrollPane.setViewportView(topList);

        top10Label1.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        top10Label1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        top10Label1.setText("Settings");

        settingScrollPane.setPreferredSize(new java.awt.Dimension(216, 87));
        settingScrollPane.setWheelScrollingEnabled(false);

        settingTextArea.setColumns(10);
        settingTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        settingTextArea.setRows(5);
        settingScrollPane.setViewportView(settingTextArea);

        javax.swing.GroupLayout fullPanelLayout = new javax.swing.GroupLayout(fullPanel);
        fullPanel.setLayout(fullPanelLayout);
        fullPanelLayout.setHorizontalGroup(
            fullPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fullPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(fullPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textAreaScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
                    .addComponent(searchTextField))
                .addGap(18, 18, 18)
                .addGroup(fullPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fullPanelLayout.createSequentialGroup()
                        .addComponent(calculateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fullPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(topListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(top10Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(top10Label1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(settingScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18))
        );
        fullPanelLayout.setVerticalGroup(
            fullPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fullPanelLayout.createSequentialGroup()
                .addGroup(fullPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fullPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(top10Label, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(topListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(top10Label1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(settingScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(fullPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(textAreaScrollPane)))
                .addGap(18, 18, 18)
                .addGroup(fullPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(calculateBtn)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        MenuBar.setForeground(new java.awt.Color(254, 254, 254));
        MenuBar.setFont(new java.awt.Font("DejaVu Sans Condensed", 0, 15)); // NOI18N

        settingMenu.setText("Settings");
        settingMenu.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        settingMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingMenuActionPerformed(evt);
            }
        });

        chooseOptions.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        chooseOptions.setText("Choose Options");
        chooseOptions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chooseOptionsMouseClicked(evt);
            }
        });
        chooseOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseOptionsActionPerformed(evt);
            }
        });
        settingMenu.add(chooseOptions);

        MenuBar.add(settingMenu);

        helpMenu.setText("Help");
        helpMenu.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N

        contentMenuItem.setText("Contents");
        contentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(contentMenuItem);

        MenuBar.add(helpMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fullPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fullPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void settingMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingMenuActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_settingMenuActionPerformed

    private void searchTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusGained
        // TODO add your handling code here:
        searchTextField.setText("");
    }//GEN-LAST:event_searchTextFieldFocusGained

    private void searchTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusLost
        // TODO add your handling code here:
        //searchTextField.setText("[ Enter Search Term(s) ]");
    }//GEN-LAST:event_searchTextFieldFocusLost

    private void chooseOptionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chooseOptionsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_chooseOptionsMouseClicked

    private void chooseOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseOptionsActionPerformed
        // TODO add your handling code here:
        settingsDialog.pack();
        settingsDialog.setLocationRelativeTo(TfIdf_Frame.this);
        settingsDialog.setVisible(true);
    }//GEN-LAST:event_chooseOptionsActionPerformed

    private void okSettingButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okSettingButtonMouseClicked
        // TODO add your handling code here:
        if (!folderPathText.getText().trim().equals("")) {
            int option = JOptionPane.showConfirmDialog(null,
                    "It may take some time to initialize the document(s).\n"
                            + "Are you sure these are the correct settings?",
                    "Confirm Settings",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            
            
            if (option == JOptionPane.YES_OPTION) {
                //<editor-fold defaultstate="collapsed" desc="If User Confirms Settings">
                if (dp != null && DocumentParser.filePath.equalsIgnoreCase(folderPathText.getText())) {
                    resetTopList();
                    DocumentParser.setEnableCosine(cosineCheckBox.isSelected());
                    DocumentParser.setEnableStopWord(stopWordCheckBox.isSelected());
                    DocumentParser.setEnableWordStem(wordStemCheckBox.isSelected());
                    DocumentParser.setEnableWordExpansion(searchTermCheckBox.isSelected());
                    DocumentParser.setEnableSynonym(synCheckBox.isSelected());
                    DocumentParser.setEnableHyponym(hypCheckBox.isSelected());
                    settingsDialog.dispose();
                    if (DocumentParser.enableStopWord && sw == null) {
                        try {
                            sw = new StopWord(stopWordPathText.getText());
                            sw.initStopWords();
                            appendSettingsMessage("StopWord Path: " + StopWord.fileName);
                        } catch (IOException iOException) {
                            JOptionPane.showMessageDialog(null,
                                    "Stop Words cannot be loaded.\n"
                                            + "This setting will be ignored",
                                    "Settings Error",
                                    JOptionPane.ERROR_MESSAGE);
                            DocumentParser.setEnableStopWord(false);
                            stopWordCheckBox.setSelected(false);
                            sw = null;
                        }
                    }else if(!DocumentParser.enableStopWord && sw!=null){
                        try {
                            dp = new DocumentParser(cosineCheckBox.isSelected(),
                                    stopWordCheckBox.isSelected(),
                                    wordStemCheckBox.isSelected(),
                                    searchTermCheckBox.isSelected(),
                                    synCheckBox.isSelected(),
                                    hypCheckBox.isSelected(),
                                    folderPathText.getText());
                            dp.parseFiles();
                        } catch (IOException iOException) {
                            JOptionPane.showMessageDialog(null,
                                "Invalid Settings. Please redo settings",
                                "Settings Error",
                                JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    setSettingsMessage(String.format("%-15s%-5s", "Folder Path: ", DocumentParser.filePath));
                    appendSettingsMessage(String.format("%-15s%-5s", "StopWord Path: ", StopWord.fileName));
                    appendSettingsMessage("");
                    appendSettingsMessage(String.format("%-20s%-10s", "Cosine Similarity: ", DocumentParser.enableCosine));
                    appendSettingsMessage(String.format("%-20s%-10s", "Stop Word: ", DocumentParser.enableStopWord));
                    appendSettingsMessage(String.format("%-20s%-10s", "Word Stemming: ", DocumentParser.enableWordStem));
                    appendSettingsMessage(String.format("%-20s%-10s", "Search Expansion: ", DocumentParser.enableWordExpansion));
                    appendSettingsMessage(String.format("%-20s%-10s", "Synonym: ", DocumentParser.enableSynonym));
                    appendSettingsMessage(String.format("%-20s%-10s", "Hyponym: ", DocumentParser.enableHyponym));                   
                    try {
                        mainTextArea.setCaretPosition(0);
                        dp.parseFiles();
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null,
                                "Invalid Settings. Please Try Again",
                                "Settings Error",
                                JOptionPane.ERROR_MESSAGE);
                        resetSettings();
                    }
                } else {
                    try {
                        if (stopWordCheckBox.isSelected()) {
                            sw = new StopWord(stopWordPathText.getText());
                            sw.initStopWords();
                        }
                        dp = new DocumentParser(cosineCheckBox.isSelected(),
                                stopWordCheckBox.isSelected(),
                                wordStemCheckBox.isSelected(),
                                searchTermCheckBox.isSelected(),
                                synCheckBox.isSelected(),
                                hypCheckBox.isSelected(),
                                folderPathText.getText());
                        settingsDialog.dispose();
                        dp.parseFiles();
                        searchTextField.setEnabled(true);
                        calculateBtn.setEnabled(true);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null,
                                "Invalid Settings. Please Try Again",
                                "Settings Error",
                                JOptionPane.ERROR_MESSAGE);
                        dp = null;
                        sw = null;
                        //resetSettings();
                    }
                }
            }
//</editor-fold>

        } else {
            JOptionPane.showMessageDialog(null, "Invalid Folder Path. Please Try Again", "Settings Error", JOptionPane.ERROR_MESSAGE);
            resetSettings();
        }
    }//GEN-LAST:event_okSettingButtonMouseClicked

    private void chooserFolderButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chooserFolderButtonMouseClicked
        // TODO add your handling code here:
        String tmpLocation = folderPathText.getText();
        dirChooser.setLocation((Toolkit.getDefaultToolkit().getScreenSize().width) / 2 - getWidth() / 2, (Toolkit.getDefaultToolkit().getScreenSize().height) / 2 - getHeight() / 2);
        int option = dirChooser.showDialog(TfIdf_Frame.this, null);
        if (option == JFileChooser.APPROVE_OPTION) {
            folderPathText.setText(dirChooser.getSelectedFile().getAbsolutePath());
        } else {
            folderPathText.setText(tmpLocation);
        }
    }//GEN-LAST:event_chooserFolderButtonMouseClicked

    private void chooseStopWordButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chooseStopWordButtonMouseClicked
        // TODO add your handling code here:
        fileChooser.setLocation((Toolkit.getDefaultToolkit().getScreenSize().width) / 2 - getWidth() / 2, (Toolkit.getDefaultToolkit().getScreenSize().height) / 2 - getHeight() / 2);
        int option = fileChooser.showDialog(TfIdf_Frame.this, null);
        if (option == JFileChooser.APPROVE_OPTION) {
            stopWordPathText.setText(fileChooser.getSelectedFile().getAbsolutePath());
            stopWordCheckBox.setSelected(true);
        }
    }//GEN-LAST:event_chooseStopWordButtonMouseClicked

    private void calculateBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_calculateBtnMouseClicked
        if (!searchTextField.getText().trim().equals("") && !searchTextField.getText().equalsIgnoreCase("[ Enter Search Term(s) ]")) {                       
            mainTextArea.setSelectionStart(0);
            mainTextArea.setSelectionEnd(0);
            textAreaScrollPane.getViewport().setViewPosition(new java.awt.Point(0, 0));            
            setMessage("[+] Initializing Calculation Sequence.");
            try {
                topList.removeAll();
                 mainTextArea.setCaretPosition(0);
                 mainTextArea.update(mainTextArea.getGraphics());
                dp.setTerms(searchTextField.getText());
                searchTextField.setText("[ Enter Search Term(s) ]");
                dp.tfIdfCalculator();
                if (DocumentParser.enableCosine) {
                    dp.cosineSimilarityCalculator();
                }
                dp.sortIndex();               
                dp.printIndex();
                topList.setModel(dp.populateJList());
                topList.setEnabled(true);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Invalid User Input. "
                        + "Please type search term(s) again.",
                        "Search Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Invalid User Input. "
                    + "Please type search term(s) again.",
                    "Search Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_calculateBtnMouseClicked

    private void topListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_topListMouseClicked
        // TODO add your handling code here:
        if (DocumentParser.tfidfMap != null) {
            String selected = topList.getSelectedValue().toString();
            int option = JOptionPane.showConfirmDialog(null,
                    "You have selected "+ selected +".\n"
                            + "You sure you want to view its Information?",
                    "Confirmation",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE
                    );
            if(option == JOptionPane.YES_OPTION){
                filenameTextField.setText(selected);
                locationTextField.setText(DocumentParser.filePath+File.separator+selected);
                
                cosineTextArea.setText(DocumentParser.docSet.get(selected).getFileInfoConsineMaps());
                cosineTextArea.setCaretPosition(0);
                tfidfTextArea.setText(DocumentParser.docSet.get(selected).getFileInfoVectors());
                tfidfTextArea.setCaretPosition(0);
                fileInfoDialog.pack();
                fileInfoDialog.setLocationRelativeTo(TfIdf_Frame.this);
                fileInfoDialog.setVisible(true);
            }
        }
    }//GEN-LAST:event_topListMouseClicked

    private void cancelSettingButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelSettingButtonMouseClicked
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(
                null, "You are exiting Application Settings.\n"
                + "All changes made will be deleted.\nAre You sure?",
                "Exiting Server Settings", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (option == JOptionPane.YES_OPTION) {
            resetSettings();
            settingsDialog.dispose();
        }
    }//GEN-LAST:event_cancelSettingButtonMouseClicked

    private void filenameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filenameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filenameTextFieldActionPerformed

    private void viewFileButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewFileButtonMouseClicked
        // TODO add your handling code here:
        String fileLocation = locationTextField.getText();
        fileViewerDialog.setTitle(fileViewerDialog.getTitle()+filenameTextField.getText());
        fileViewerDialog.pack();
        fileViewerDialog.setLocationRelativeTo(TfIdf_Frame.this);
        //
        try {            
            Scanner scanner = new Scanner(new File(fileLocation));
            fileViewerTextArea.setText("");
            while(scanner.hasNextLine()){
                String s = scanner.nextLine();
                fileViewerTextArea.append(s);
                fileViewerTextArea.append("\n");
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(TfIdf_Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        fileViewerDialog.setVisible(true);
    }//GEN-LAST:event_viewFileButtonMouseClicked

    private void contentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentMenuItemActionPerformed
        // TODO add your handling code here:
        helpDialog.pack();
        helpDialog.setLocationRelativeTo(TfIdf_Frame.this);
        helpDialog.setVisible(true);
    }//GEN-LAST:event_contentMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        String os = System.getProperty("os.name");
        String theme = "Nimbus";
        if(os.startsWith("Linux")){
            theme = "GTK+";
        }
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (theme.equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TfIdf_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TfIdf_Frame().setVisible(true);
                JOptionPane.showMessageDialog(null, "Please set application settings before proceeding.");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JLabel additionalFeaturesLabel;
    private javax.swing.JButton calculateBtn;
    private javax.swing.JButton cancelSettingButton;
    private javax.swing.JLabel chooseFolderLabel;
    private javax.swing.JMenuItem chooseOptions;
    private javax.swing.JButton chooseStopWordButton;
    private javax.swing.JLabel chooseStopWordLabel;
    private javax.swing.JButton chooserFolderButton;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JCheckBox cosineCheckBox;
    private javax.swing.JLabel cosineSimLabel;
    private javax.swing.JScrollPane cosineSimScrollPane1;
    private javax.swing.JTextArea cosineTextArea;
    public static javax.swing.JFileChooser dirChooser;
    public static javax.swing.JFileChooser fileChooser;
    private javax.swing.JDialog fileInfoDialog;
    private javax.swing.JPanel fileInfoPanel;
    private javax.swing.JLabel fileLocationLabel;
    private javax.swing.JLabel fileTitleLabel;
    private javax.swing.JScrollPane fileViewScrollPane;
    private javax.swing.JDialog fileViewerDialog;
    private javax.swing.JPanel fileViewerPanel;
    private javax.swing.JTextArea fileViewerTextArea;
    private javax.swing.JLabel filenameLabel;
    private javax.swing.JTextField filenameTextField;
    private javax.swing.JTextField folderPathText;
    private javax.swing.JPanel fullPanel;
    private javax.swing.JDialog helpDialog;
    private javax.swing.JLabel helpLabel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPanel helpPanel;
    private javax.swing.JScrollPane helpScrollPane;
    private javax.swing.JTextArea helpTextArea;
    private javax.swing.JCheckBox hypCheckBox;
    private javax.swing.JTextField locationTextField;
    public static javax.swing.JTextArea mainTextArea;
    private javax.swing.JButton okSettingButton;
    private javax.swing.JCheckBox searchTermCheckBox;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JMenu settingMenu;
    private javax.swing.JScrollPane settingScrollPane;
    public static javax.swing.JTextArea settingTextArea;
    public static javax.swing.JDialog settingsDialog;
    private javax.swing.JLabel settingsLabel;
    public static javax.swing.JPanel settingsPanel;
    private javax.swing.JCheckBox stopWordCheckBox;
    private javax.swing.JTextField stopWordPathText;
    private javax.swing.JCheckBox synCheckBox;
    private javax.swing.JScrollPane textAreaScrollPane;
    private javax.swing.JLabel tfidfLabel;
    private javax.swing.JScrollPane tfidfScrollPane;
    private javax.swing.JTextArea tfidfTextArea;
    private javax.swing.JLabel top10Label;
    private javax.swing.JLabel top10Label1;
    private javax.swing.JList topList;
    private javax.swing.JScrollPane topListScrollPane;
    private javax.swing.JButton viewFileButton;
    private javax.swing.JCheckBox wordStemCheckBox;
    // End of variables declaration//GEN-END:variables
}
